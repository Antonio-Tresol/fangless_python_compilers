
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'inputAMPERSAND AMPERSAND_EQUAL AND BAR BAR_EQUAL BINARY_NUMBER BREAK CLASS COLON COMMA CONTINUE DEDENT DEF DOT DOUBLE_SLASH DOUBLE_SLASH_EQUAL DOUBLE_STAR DOUBLE_STAR_EQUAL ELIF ELSE END_TOKEN EQUAL EQUAL_EQUAL FALSE FLOATING_NUMBER FOR GREATER_EQUAL GREATER_THAN HAT HAT_EQUAL HEXADECIMAL_NUMBER IF IN INDENT INTEGER_NUMBER LEFT_SHIFT LEFT_SHIFT_EQUAL LESS_EQUAL LESS_THAN L_BRACKET L_CURLY_BRACE L_PARENTHESIS MINUS MINUS_EQUAL MOD MOD_EQUAL NAME NEWLINE NOT NOT_EQUAL OCTAL_NUMBER OR PASS PLUS PLUS_EQUAL RANGE RAW_STRING RETURN RIGHT_SHIFT RIGHT_SHIFT_EQUAL R_BRACKET R_CURLY_BRACE R_PARENTHESIS SEMICOLON SLASH SLASH_EQUAL STAR START_TOKEN STAR_EQUAL STRING TILDE TRIPLE_STRING TRUE UNICODE_STRING WHILE WHITESPACEinput    :   START_TOKEN operation_series END_TOKENoperation_series : binary_operation\n                        | binary_operation NEWLINE\n                        | binary_operation NEWLINE operation_series\n    literal  :   string\n                |   number\n                |   bool\n                |   structure\n    string   :   STRING\n                |   UNICODE_STRING\n                |   RAW_STRING\n    number   :   FLOATING_NUMBER\n                |   INTEGER_NUMBER\n                |   BINARY_NUMBER\n                |   OCTAL_NUMBER\n                |   HEXADECIMAL_NUMBER\n    bool     :   TRUE\n                |   FALSE\n    structure    :   dict\n                    |   list\n                    |   tuple\n                    |   set\n    dict :   L_CURLY_BRACE dict_content R_CURLY_BRACElist :   L_BRACKET general_structure_content R_BRACKETtuple    :   L_PARENTHESIS general_structure_content R_PARENTHESISset  :   L_CURLY_BRACE general_series R_CURLY_BRACEdict_content :   epsilon\n                    |   key_value_series\n    general_structure_content    :   epsilon\n                                    |   general_series\n    key_value_series     :   key_value_pair\n                            |   key_value_pair COMMA\n                            |   key_value_pair COMMA key_value_series\n    general_series   :   literal\n                        |   literal COMMA\n                        |   literal COMMA general_series\n    key_value_pair   :   literal COLON literalunary_operation  :   PLUS literal\n                        |   MINUS literal\n                        |   NOT literal\n                        |   TILDE literal\n                        |   literal LEFT_SHIFT\n                        |   literal RIGHT_SHIFT\n    binary_operation     :   binary_operand binary_operator binary_operand\n                            |   binary_operand binary_operator binary_operation\n    binary_operand   :   literal\n                        |   unary_operation\n    binary_operator  :   PLUS\n                        |   MINUS\n                        |   STAR\n                        |   DOUBLE_STAR\n                        |   SLASH\n                        |   DOUBLE_SLASH\n                        |   MOD\n                        |   AND\n                        |   OR\n                        |   AMPERSAND\n                        |   BAR\n                        |   HAT\n                        |   EQUAL_EQUAL\n                        |   NOT_EQUAL\n                        |   LESS_THAN\n                        |   LESS_EQUAL\n                        |   GREATER_THAN\n                        |   GREATER_EQUAL\n    epsilon  :'
    
_lr_action_items = {'START_TOKEN':([0,],[2,]),'$end':([1,33,],[0,-1,]),'PLUS':([2,5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,72,74,75,79,80,],[12,36,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,12,12,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-42,-43,-38,-39,-40,-41,36,-23,-26,-24,-25,]),'MINUS':([2,5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,72,74,75,79,80,],[13,37,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,13,13,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-42,-43,-38,-39,-40,-41,37,-23,-26,-24,-25,]),'NOT':([2,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[14,14,14,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,]),'TILDE':([2,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,],[15,15,15,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,]),'STRING':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[16,16,16,16,16,16,16,16,16,16,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,16,16,16,]),'UNICODE_STRING':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[17,17,17,17,17,17,17,17,17,17,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,17,17,17,]),'RAW_STRING':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[18,18,18,18,18,18,18,18,18,18,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,18,18,18,]),'FLOATING_NUMBER':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[19,19,19,19,19,19,19,19,19,19,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,19,19,19,]),'INTEGER_NUMBER':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[20,20,20,20,20,20,20,20,20,20,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,20,20,20,]),'BINARY_NUMBER':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[21,21,21,21,21,21,21,21,21,21,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,21,21,21,]),'OCTAL_NUMBER':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[22,22,22,22,22,22,22,22,22,22,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,22,22,22,]),'HEXADECIMAL_NUMBER':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[23,23,23,23,23,23,23,23,23,23,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,23,23,23,]),'TRUE':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[24,24,24,24,24,24,24,24,24,24,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,24,24,24,]),'FALSE':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[25,25,25,25,25,25,25,25,25,25,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,25,25,25,]),'L_CURLY_BRACE':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[30,30,30,30,30,30,30,30,30,30,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,30,30,30,]),'L_BRACKET':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[31,31,31,31,31,31,31,31,31,31,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,31,31,31,]),'L_PARENTHESIS':([2,12,13,14,15,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,76,77,78,],[32,32,32,32,32,32,32,32,32,32,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,32,32,32,]),'END_TOKEN':([3,4,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,34,54,55,56,57,58,59,71,72,73,74,75,79,80,],[33,-2,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-3,-42,-43,-38,-39,-40,-41,-4,-44,-45,-23,-26,-24,-25,]),'NEWLINE':([4,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,73,74,75,79,80,],[34,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,-44,-45,-23,-26,-24,-25,]),'STAR':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[38,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,38,-23,-26,-24,-25,]),'DOUBLE_STAR':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[39,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,39,-23,-26,-24,-25,]),'SLASH':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[40,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,40,-23,-26,-24,-25,]),'DOUBLE_SLASH':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[41,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,41,-23,-26,-24,-25,]),'MOD':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[42,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,42,-23,-26,-24,-25,]),'AND':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[43,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,43,-23,-26,-24,-25,]),'OR':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[44,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,44,-23,-26,-24,-25,]),'AMPERSAND':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[45,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,45,-23,-26,-24,-25,]),'BAR':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[46,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,46,-23,-26,-24,-25,]),'HAT':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[47,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,47,-23,-26,-24,-25,]),'EQUAL_EQUAL':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[48,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,48,-23,-26,-24,-25,]),'NOT_EQUAL':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[49,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,49,-23,-26,-24,-25,]),'LESS_THAN':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[50,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,50,-23,-26,-24,-25,]),'LESS_EQUAL':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[51,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,51,-23,-26,-24,-25,]),'GREATER_THAN':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[52,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,52,-23,-26,-24,-25,]),'GREATER_EQUAL':([5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,54,55,56,57,58,59,72,74,75,79,80,],[53,-46,-47,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-42,-43,-38,-39,-40,-41,53,-23,-26,-24,-25,]),'LEFT_SHIFT':([6,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,74,75,79,80,],[54,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-26,-24,-25,]),'RIGHT_SHIFT':([6,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,74,75,79,80,],[55,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-26,-24,-25,]),'COMMA':([8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,64,65,69,74,75,79,80,82,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,76,78,76,-23,-26,-24,-25,-37,]),'COLON':([8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,64,74,75,79,80,84,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,77,-23,-26,-24,-25,77,]),'R_CURLY_BRACE':([8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,60,61,62,63,64,65,69,74,75,76,78,79,80,81,82,83,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-66,74,75,-27,-28,-34,-31,-34,-23,-26,-35,-32,-24,-25,-36,-37,-33,]),'R_BRACKET':([8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,66,67,68,69,74,75,76,79,80,81,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-66,79,-29,-30,-34,-23,-26,-35,-24,-25,-36,]),'R_PARENTHESIS':([8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,67,68,69,70,74,75,76,79,80,81,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-66,-29,-30,-34,80,-23,-26,-35,-24,-25,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'input':([0,],[1,]),'operation_series':([2,34,],[3,71,]),'binary_operation':([2,34,35,],[4,4,73,]),'binary_operand':([2,34,35,],[5,5,72,]),'literal':([2,12,13,14,15,30,31,32,34,35,76,77,78,],[6,56,57,58,59,64,69,69,6,6,69,82,84,]),'unary_operation':([2,34,35,],[7,7,7,]),'string':([2,12,13,14,15,30,31,32,34,35,76,77,78,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'number':([2,12,13,14,15,30,31,32,34,35,76,77,78,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'bool':([2,12,13,14,15,30,31,32,34,35,76,77,78,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'structure':([2,12,13,14,15,30,31,32,34,35,76,77,78,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'dict':([2,12,13,14,15,30,31,32,34,35,76,77,78,],[26,26,26,26,26,26,26,26,26,26,26,26,26,]),'list':([2,12,13,14,15,30,31,32,34,35,76,77,78,],[27,27,27,27,27,27,27,27,27,27,27,27,27,]),'tuple':([2,12,13,14,15,30,31,32,34,35,76,77,78,],[28,28,28,28,28,28,28,28,28,28,28,28,28,]),'set':([2,12,13,14,15,30,31,32,34,35,76,77,78,],[29,29,29,29,29,29,29,29,29,29,29,29,29,]),'binary_operator':([5,72,],[35,35,]),'dict_content':([30,],[60,]),'general_series':([30,31,32,76,],[61,68,68,81,]),'epsilon':([30,31,32,],[62,67,67,]),'key_value_series':([30,78,],[63,83,]),'key_value_pair':([30,78,],[65,65,]),'general_structure_content':([31,32,],[66,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> input","S'",1,None,None,None),
  ('input -> START_TOKEN operation_series END_TOKEN','input',3,'p_input','parser.py',10),
  ('operation_series -> binary_operation','operation_series',1,'p_operation_series_test','parser.py',20),
  ('operation_series -> binary_operation NEWLINE','operation_series',2,'p_operation_series_test','parser.py',21),
  ('operation_series -> binary_operation NEWLINE operation_series','operation_series',3,'p_operation_series_test','parser.py',22),
  ('literal -> string','literal',1,'p_literal','parser.py',28),
  ('literal -> number','literal',1,'p_literal','parser.py',29),
  ('literal -> bool','literal',1,'p_literal','parser.py',30),
  ('literal -> structure','literal',1,'p_literal','parser.py',31),
  ('string -> STRING','string',1,'p_string','parser.py',37),
  ('string -> UNICODE_STRING','string',1,'p_string','parser.py',38),
  ('string -> RAW_STRING','string',1,'p_string','parser.py',39),
  ('number -> FLOATING_NUMBER','number',1,'p_number','parser.py',45),
  ('number -> INTEGER_NUMBER','number',1,'p_number','parser.py',46),
  ('number -> BINARY_NUMBER','number',1,'p_number','parser.py',47),
  ('number -> OCTAL_NUMBER','number',1,'p_number','parser.py',48),
  ('number -> HEXADECIMAL_NUMBER','number',1,'p_number','parser.py',49),
  ('bool -> TRUE','bool',1,'p_bool','parser.py',55),
  ('bool -> FALSE','bool',1,'p_bool','parser.py',56),
  ('structure -> dict','structure',1,'p_structure','parser.py',63),
  ('structure -> list','structure',1,'p_structure','parser.py',64),
  ('structure -> tuple','structure',1,'p_structure','parser.py',65),
  ('structure -> set','structure',1,'p_structure','parser.py',66),
  ('dict -> L_CURLY_BRACE dict_content R_CURLY_BRACE','dict',3,'p_dict','parser.py',72),
  ('list -> L_BRACKET general_structure_content R_BRACKET','list',3,'p_list','parser.py',77),
  ('tuple -> L_PARENTHESIS general_structure_content R_PARENTHESIS','tuple',3,'p_tuple','parser.py',82),
  ('set -> L_CURLY_BRACE general_series R_CURLY_BRACE','set',3,'p_set','parser.py',87),
  ('dict_content -> epsilon','dict_content',1,'p_dict_content','parser.py',92),
  ('dict_content -> key_value_series','dict_content',1,'p_dict_content','parser.py',93),
  ('general_structure_content -> epsilon','general_structure_content',1,'p_general_structure_content','parser.py',99),
  ('general_structure_content -> general_series','general_structure_content',1,'p_general_structure_content','parser.py',100),
  ('key_value_series -> key_value_pair','key_value_series',1,'p_key_value_series','parser.py',107),
  ('key_value_series -> key_value_pair COMMA','key_value_series',2,'p_key_value_series','parser.py',108),
  ('key_value_series -> key_value_pair COMMA key_value_series','key_value_series',3,'p_key_value_series','parser.py',109),
  ('general_series -> literal','general_series',1,'p_general_series','parser.py',115),
  ('general_series -> literal COMMA','general_series',2,'p_general_series','parser.py',116),
  ('general_series -> literal COMMA general_series','general_series',3,'p_general_series','parser.py',117),
  ('key_value_pair -> literal COLON literal','key_value_pair',3,'p_key_value_pair','parser.py',123),
  ('unary_operation -> PLUS literal','unary_operation',2,'p_unary_operation','parser.py',129),
  ('unary_operation -> MINUS literal','unary_operation',2,'p_unary_operation','parser.py',130),
  ('unary_operation -> NOT literal','unary_operation',2,'p_unary_operation','parser.py',131),
  ('unary_operation -> TILDE literal','unary_operation',2,'p_unary_operation','parser.py',132),
  ('unary_operation -> literal LEFT_SHIFT','unary_operation',2,'p_unary_operation','parser.py',133),
  ('unary_operation -> literal RIGHT_SHIFT','unary_operation',2,'p_unary_operation','parser.py',134),
  ('binary_operation -> binary_operand binary_operator binary_operand','binary_operation',3,'p_binary_operation','parser.py',143),
  ('binary_operation -> binary_operand binary_operator binary_operation','binary_operation',3,'p_binary_operation','parser.py',144),
  ('binary_operand -> literal','binary_operand',1,'p_binary_operand','parser.py',150),
  ('binary_operand -> unary_operation','binary_operand',1,'p_binary_operand','parser.py',151),
  ('binary_operator -> PLUS','binary_operator',1,'p_binary_operator','parser.py',157),
  ('binary_operator -> MINUS','binary_operator',1,'p_binary_operator','parser.py',158),
  ('binary_operator -> STAR','binary_operator',1,'p_binary_operator','parser.py',159),
  ('binary_operator -> DOUBLE_STAR','binary_operator',1,'p_binary_operator','parser.py',160),
  ('binary_operator -> SLASH','binary_operator',1,'p_binary_operator','parser.py',161),
  ('binary_operator -> DOUBLE_SLASH','binary_operator',1,'p_binary_operator','parser.py',162),
  ('binary_operator -> MOD','binary_operator',1,'p_binary_operator','parser.py',163),
  ('binary_operator -> AND','binary_operator',1,'p_binary_operator','parser.py',164),
  ('binary_operator -> OR','binary_operator',1,'p_binary_operator','parser.py',165),
  ('binary_operator -> AMPERSAND','binary_operator',1,'p_binary_operator','parser.py',166),
  ('binary_operator -> BAR','binary_operator',1,'p_binary_operator','parser.py',167),
  ('binary_operator -> HAT','binary_operator',1,'p_binary_operator','parser.py',168),
  ('binary_operator -> EQUAL_EQUAL','binary_operator',1,'p_binary_operator','parser.py',169),
  ('binary_operator -> NOT_EQUAL','binary_operator',1,'p_binary_operator','parser.py',170),
  ('binary_operator -> LESS_THAN','binary_operator',1,'p_binary_operator','parser.py',171),
  ('binary_operator -> LESS_EQUAL','binary_operator',1,'p_binary_operator','parser.py',172),
  ('binary_operator -> GREATER_THAN','binary_operator',1,'p_binary_operator','parser.py',173),
  ('binary_operator -> GREATER_EQUAL','binary_operator',1,'p_binary_operator','parser.py',174),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',180),
]
